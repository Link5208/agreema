// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

// Table follows {
//   following_user_id integer
//   followed_user_id integer
//   created_at timestamp
// }

// Table users {
//   id integer [primary key]
//   username varchar
//   role varchar
//   created_at timestamp
// }

// Table posts {
//   id integer [primary key]
//   title varchar
//   body text [note: 'Content of the post']
//   user_id integer [not null]
//   status varchar
//   created_at timestamp
// }

// Ref user_posts: posts.user_id > users.id // many-to-one

// Ref: users.id < follows.following_user_id

// Ref: users.id < follows.followed_user_id

Table contracts {
  id varchar(50) [primary key, not null]
  name varchar(50) [not null]
  sign_date datetime [not null]
}

Table items {
  id varchar(50) [primary key, not null]
  name varchar(50) [not null]
  unit varchar(10) [not null]
  quantity integer [not null]
  unit_price decimal [not null]
  total_amount decimal
  contract_id varchar(50) [not null, ref: > contracts.id]
}

Table action_logs {
  id varchar(50) [primary key, not null]
  contract_id varchar(50) [not null, ref: > contracts.id]
  type varchar(50) [not null]
  time datetime [not null]
  performed_by varchar(50) [not null]
  description varchar(200)
}

Table files {
  id varchar(50) [primary key, not null]
  contract_id varchar(50) [not null, ref: > contracts.id]
  name varchar(50) [not null]
  type varchar(50) [not null]
  size integer
  path varchar(50) [not null]
  uploaded_by varchar(50) [not null]
  uploaded_at datetime [not null]
  description varchar(200)
}

Table user {
  id integer [primary key]
  mail varchar(50) [not null]
  password varchar(50) [not null]
}